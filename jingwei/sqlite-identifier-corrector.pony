use "collections"

class val SqliteIdentifierCorrector is IdentifierCorrector
  let _keywords: Set[String val] val

  new create() =>
    let keywords': Array[String val] val =
      [
        "ABORT"
        "ACTION"
        "ADD"
        "AFTER"
        "ALL"
        "ALTER"
        "ALWAYS"
        "ANALYZE"
        "AND"
        "AS"
        "ASC"
        "ATTACH"
        "AUTOINCREMENT"
        "BEFORE"
        "BEGIN"
        "BETWEEN"
        "BY"
        "CASCADE"
        "CASE"
        "CAST"
        "CHECK"
        "COLLATE"
        "COLUMN"
        "COMMIT"
        "CONFLICT"
        "CONSTRAINT"
        "CREATE"
        "CROSS"
        "CURRENT"
        "CURRENT_DATE"
        "CURRENT_TIME"
        "CURRENT_TIMESTAMP"
        "DATABASE"
        "DEFAULT"
        "DEFERRABLE"
        "DEFERRED"
        "DELETE"
        "DESC"
        "DETACH"
        "DISTINCT"
        "DO"
        "DROP"
        "EACH"
        "ELSE"
        "END"
        "ESCAPE"
        "EXCEPT"
        "EXCLUDE"
        "EXCLUSIVE"
        "EXISTS"
        "EXPLAIN"
        "FAIL"
        "FILTER"
        "FIRST"
        "FOLLOWING"
        "FOR"
        "FOREIGN"
        "FROM"
        "FULL"
        "GENERATED"
        "GLOB"
        "GROUP"
        "GROUPS"
        "HAVING"
        "IF"
        "IGNORE"
        "IMMEDIATE"
        "IN"
        "INDEX"
        "INDEXED"
        "INITIALLY"
        "INNER"
        "INSERT"
        "INSTEAD"
        "INTERSECT"
        "INTO"
        "IS"
        "ISNULL"
        "JOIN"
        "KEY"
        "LAST"
        "LEFT"
        "LIKE"
        "LIMIT"
        "MATCH"
        "MATERIALIZED"
        "NATURAL"
        "NO"
        "NOT"
        "NOTHING"
        "NOTNULL"
        "NULL"
        "NULLS"
        "OF"
        "OFFSET"
        "ON"
        "OR"
        "ORDER"
        "OTHERS"
        "OUTER"
        "OVER"
        "PARTITION"
        "PLAN"
        "PRAGMA"
        "PRECEDING"
        "PRIMARY"
        "QUERY"
        "RAISE"
        "RANGE"
        "RECURSIVE"
        "REFERENCES"
        "REGEXP"
        "REINDEX"
        "RELEASE"
        "RENAME"
        "REPLACE"
        "RESTRICT"
        "RETURNING"
        "RIGHT"
        "ROLLBACK"
        "ROW"
        "ROWS"
        "SAVEPOINT"
        "SELECT"
        "SET"
        "TABLE"
        "TEMP"
        "TEMPORARY"
        "THEN"
        "TIES"
        "TO"
        "TRANSACTION"
        "TRIGGER"
        "UNBOUNDED"
        "UNION"
        "UNIQUE"
        "UPDATE"
        "USING"
        "VACUUM"
        "VALUES"
        "VIEW"
        "VIRTUAL"
        "WHEN"
        "WHERE"
        "WINDOW"
        "WITH"
        "WITHOUT"
      ]
    let keywords: Set[String val] trn = recover trn Set[String val](keywords'.size()) end
    for key in keywords'.values() do
      keywords.set(key)
    end
    _keywords = consume keywords

  fun val correct(
    identifier: String val)
  : String val =>
    let upper_identifier: String val = identifier.upper()
    if _keywords.contains(upper_identifier) then
      let identifier': String iso = recover iso String(identifier.size() + 2) end
      (consume identifier') .> append("`") .> append(identifier) .> append("`")
    else
      identifier
    end
